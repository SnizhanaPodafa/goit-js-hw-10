{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst startBtn = document.querySelector('[data-start]');\nconst daysElem = document.querySelector('[data-days]');\nconst hoursElem = document.querySelector('[data-hours]');\nconst minutesElem = document.querySelector('[data-minutes]');\nconst secondsElem = document.querySelector('[data-seconds]');\nconst inputEl = document.querySelector('#datetime-picker');\n\nflatpickr (inputEl, {\n// const options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n        startBtn.disabled = true;\n        iziToast.show({\n            title: 'Error',\n            message: 'Please choose a date in the future',\n            position: 'topRight',\n            backgroundColor: 'red',\n            color: 'white',\n            titleColor: 'white',\n            messageColor: 'white',\n            \n        })\n    }\n    startBtn.disabled = false;\n\n    console.log(selectedDates[0]);\n    console.log('hello');\n  },\n});\n\n\nstartBtn.addEventListener('click', () => {\n   const id = setInterval(() => {\n    const diff = userSelectedDate - new Date();\n\n    const timeObj = convertMs(diff);\n\n    renderTime(timeObj);\n  }, 1000);\n    startBtn.disabled = true;\n\n    setTimeout(() => {\n        clearInterval(id)\n    }, userSelectedDate - new Date());\n    \n}, );\n\nfunction renderTime(timeObj) {\n    secondsElem.textContent = `${timeObj.seconds}`.padStart(2,\"0\");\n    minutesElem.textContent = `${timeObj.minutes}`.padStart(2,\"0\");\n    hoursElem.textContent = `${timeObj.hours}`.padStart(2,\"0\");\n    daysElem.textContent = `${timeObj.days}`.padStart(2,\"0\");\n}\n\nconsole.log(startBtn);\nlet userSelectedDate;\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["startBtn","daysElem","hoursElem","minutesElem","secondsElem","inputEl","flatpickr","selectedDates","userSelectedDate","iziToast","id","diff","timeObj","convertMs","renderTime","ms","days","hours","minutes","seconds"],"mappings":"2GAOA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAU,SAAS,cAAc,kBAAkB,EAEzDC,EAAWD,EAAS,CAElB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQE,EAAe,CACrBC,EAAmBD,EAAc,CAAC,EAC9BC,EAAmB,IAAI,OACvBR,EAAS,SAAW,GACpBS,EAAS,KAAK,CACV,MAAO,QACP,QAAS,qCACT,SAAU,WACV,gBAAiB,MACjB,MAAO,QACP,WAAY,QACZ,aAAc,OAE1B,CAAS,GAELT,EAAS,SAAW,GAEpB,QAAQ,IAAIO,EAAc,CAAC,CAAC,EAC5B,QAAQ,IAAI,OAAO,CACpB,CACH,CAAC,EAGDP,EAAS,iBAAiB,QAAS,IAAM,CACtC,MAAMU,EAAK,YAAY,IAAM,CAC5B,MAAMC,EAAOH,EAAmB,IAAI,KAE9BI,EAAUC,EAAUF,CAAI,EAE9BG,EAAWF,CAAO,CACnB,EAAE,GAAI,EACLZ,EAAS,SAAW,GAEpB,WAAW,IAAM,CACb,cAAcU,CAAE,CACxB,EAAOF,EAAmB,IAAI,IAAM,CAEpC,GAEA,SAASM,EAAWF,EAAS,CACzBR,EAAY,YAAc,GAAGQ,EAAQ,OAAO,GAAG,SAAS,EAAE,GAAG,EAC7DT,EAAY,YAAc,GAAGS,EAAQ,OAAO,GAAG,SAAS,EAAE,GAAG,EAC7DV,EAAU,YAAc,GAAGU,EAAQ,KAAK,GAAG,SAAS,EAAE,GAAG,EACzDX,EAAS,YAAc,GAAGW,EAAQ,IAAI,GAAG,SAAS,EAAE,GAAG,CAC3D,CAEA,QAAQ,IAAIZ,CAAQ,EACpB,IAAIQ,EAEJ,SAASK,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}